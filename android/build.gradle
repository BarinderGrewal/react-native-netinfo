buildscript {
  repositories {
    google()
    jcenter()
  }

  dependencies {
    //noinspection GradleDependency
    classpath 'com.android.tools.build:gradle:3.2.1'
  }
}

plugins {
  id "com.diffplug.gradle.spotless" version "3.23.0"
}

spotless {
  enforceCheck false

  java {
    target '**/*.java'
    googleJavaFormat().aosp()
    removeUnusedImports()
    licenseHeaderFile 'licenseHeader.txt'
  }
  format 'xml', {
    target fileTree('.') {
      include '**/*.xml', '**/*.xsd'
      exclude '**/build/**'
    }
    // Use for example eclipseWtp('xml', '4.7.3a') to specify a specific version of Eclipse,
    // available versions are: https://github.com/diffplug/spotless/tree/master/lib-extra/src/main/resources/com/diffplug/spotless/extra/eclipse_wtp_formatters
    eclipseWtp('xml')
  }
}

def getExtOrInitialValue(name, initialValue) {
  return rootProject.ext.has(name) ? rootProject.ext.get(name) : initialValue
}

def getExtOrDefault(name) {
  return rootProject.ext.has(name) ? rootProject.ext.get(name) : project.properties['ReactNativeNetInfo_' + name]
}

def getExtOrIntegerDefault(name) {
  return rootProject.ext.has(name) ? rootProject.ext.get(name) : (project.properties['ReactNativeNetInfo_' + name]).toInteger()
}

apply plugin: 'com.android.library'

android {
  compileSdkVersion getExtOrIntegerDefault('compileSdkVersion')
  buildToolsVersion getExtOrDefault('buildToolsVersion')

  defaultConfig {
    minSdkVersion getExtOrIntegerDefault('minSdkVersion')
    targetSdkVersion getExtOrIntegerDefault('targetSdkVersion')
  }
  lintOptions{
    abortOnError false
  }
}

repositories {
  google()
  jcenter()
  mavenCentral()

  def found = false
  def defaultDir = null
  def androidSourcesName = 'React Native sources'

  if (rootProject.ext.has('reactNativeAndroidRoot')) {
    defaultDir = rootProject.ext.get('reactNativeAndroidRoot')
  } else {
    defaultDir = new File(
            projectDir,
            '/../../../node_modules/react-native/android'
    )
  }

  if (defaultDir.exists()) {
    maven {
      url defaultDir.toString()
      name androidSourcesName
    }

    logger.info(":${project.name}:reactNativeAndroidRoot ${defaultDir.canonicalPath}")
    found = true
  } else {
    def parentDir = rootProject.projectDir
    1.upto(5, {
      if (found) return true
      parentDir = parentDir.parentFile
      def androidSourcesDir = new File(
              parentDir,
              'node_modules/react-native'
      )
      def androidPrebuiltBinaryDir = new File(
              parentDir,
              'node_modules/react-native/android'
      )
      if (androidPrebuiltBinaryDir.exists()) {
        maven {
          url androidPrebuiltBinaryDir.toString()
          name androidSourcesName
        }

        logger.info(":${project.name}:reactNativeAndroidRoot ${androidPrebuiltBinaryDir.canonicalPath}")
        found = true
      } else if (androidSourcesDir.exists()) {
        maven {
          url androidSourcesDir.toString()
          name androidSourcesName
        }

        logger.info(":${project.name}:reactNativeAndroidRoot ${androidSourcesDir.canonicalPath}")
        found = true
      }
    })
  }

  if (!found) {
    throw new GradleException(
            "${project.name}: unable to locate React Native android sources. " +
                    "Ensure you have you installed React Native as a dependency in your project and try again."
    )
  }
}

dependencies {
  //noinspection GradleDynamicVersion
  api 'com.facebook.react:react-native:+'

  def supportLibVersion = getExtOrInitialValue('supportLibVersion', getExtOrInitialValue('supportVersion', null))
  def androidXVersion = getExtOrInitialValue('androidXVersion', null)
  if (supportLibVersion && androidXVersion == null) {
    implementation "com.android.support:appcompat-v7:$supportLibVersion"
  } else {
    def defaultAndroidXVersion = "1.+"
    if (androidXVersion == null) {
      androidXVersion = defaultAndroidXVersion
    }
    def androidXCore = getExtOrInitialValue('androidXCore', androidXVersion)
    implementation "androidx.core:core:$androidXCore"
  }
}
